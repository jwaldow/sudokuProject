var selected = null;

const CORRECT_VALUE = 0;
const IS_DEFAULT = 1;

//These colors aren't completely arbitrary. I used a color scheme designer so they go together nicely.
const BLACK = '#000000'; //Variable for when a number is generated by the computer.
const HOVER = '#FFEC73';	//No comment needed.
const SELECT = '#FFDD00';
const EMPTY = '#EDEDED';
const DEFAULT = 'lightgrey';

var sudokuAnswer = generateBoard(); //This is...the matrix.
var sudoku= generateUserBoard(sudokuAnswer);

document.onkeypress = onKeyPress;
if (document.layers) document.captureEvents(Event.KEYPRESS);

window.onload = function() {
	for (i = 1; i < 10; i++) {
		for (j = 1; j < 10; j++) {
			var c = document.getElementById(getId(i, j));
			c.setAttribute("is_default", "false");
			c.onmouseover = mouseOver;
			c.onmouseout = mouseOut;
			c.onclick = onClickSquare;
			ctx = c.getContext('2d');
			colorBackground(c, EMPTY);

			//sets up the pattern to draw the numbers
			if((i % 3 == j % 5) || (((i * j) % 2) == 1)) {
				colorBackground(c, DEFAULT);
				c.setAttribute("is_default", "true");
				c.setAttribute("value",paintAnswer(c));
			}			
		}
	}
	document.getElementById("reset").onclick = reset;
}

function mouseOut(){	
	var c = document.getElementById(this.id);
	if(c.getAttribute("is_default")!="true"){
		colorBackground(c, EMPTY);
		if(selected != null){
			colorBackground(selected, SELECT);
			if(selected.getAttribute("value") != null) {
				writeNumber(selected, selected.getAttribute("value"));
			}
		}
		if(c.getAttribute("value") != null) {
			writeNumber(c, c.getAttribute("value"));
		}
	}
}

function onClickSquare() {
	if(this.getAttribute("is_default")!="true") {
		if (selected != null) {
			colorBackground(selected, EMPTY);
			if (selected.getAttribute("value") != null) {
				writeNumber(selected, selected.getAttribute("value"));
			}
		}
	    selected = document.getElementById(this.id);
		colorBackground(selected, SELECT);
		if (selected.getAttribute("value") != null) {
			writeNumber(selected, selected.getAttribute("value"));
		}		
	}
}

function mouseOver(){
	var c = document.getElementById(this.id);
	if(c.getAttribute("is_default")!="true"){
		colorBackground(c, HOVER);
		if(c.getAttribute("value")!=null){
			writeNumber(c, c.getAttribute("value"));		
		}
	}
}

function colorBackground(c, color) {	var ctx = c.getContext('2d');
	ctx.fillStyle=color;
	ctx.fillRect(0, 0, 300, 300);
}

function writeNumber(c, num) {
	ctx = c.getContext('2d');
	ctx.textAlign = 'center';
	ctx.font = 'Bold 100pt sans-serif';
	ctx.fillStyle="#000000";
	ctx.fillText(num,150,125);	
}

function onKeyPress(event) {
	
	var chCode = (('charCode' in event) ? event.charCode : event.keyCode) ;
	var guess = chCode - 48;
	if (selected != null && guess >= 1 && guess <= 9) {
		setSquareNumber(guess, 
				getIFromId(selected.getAttribute("id")), 
				getJFromId(selected.getAttribute("id")));
	} else if (guess == 0) {
		selected.removeAttribute("value");
		colorBackground(selected, SELECT);
	}
}

function getId(i, j) {
	return "row" + i + "_col" + j
}

function setSquareNumber(guess, i, j) {
	var conflict = getConflictingSquare(guess, i, j);
	if (conflict != null) {
		colorBackground(conflict, "#FF0000");
		writeNumber(conflict, conflict.getAttribute("value"));
		setTimeout(function(){revertAlert(conflict)}, 3000);
	} else if (document.getElementById(getId(i, j)).getAttribute("is_default") == "false") {
		document.getElementById(getId(i, j)).setAttribute("value", guess)
		writeNumber(document.getElementById(getId(i, j)), guess);
	}
	
	/**/
	if (isComplete()==true) {
		var win = document.getElementById("winner");
		win.style.visibility='visible';
	}
}

function revertAlert(square){
	if(square.getAttribute("is_default")=="true"){
		colorBackground(square, DEFAULT);
	} else {
		colorBackground(square, EMPTY);
	}
	writeNumber(square, square.getAttribute("value"));
}

//Takes a square and a number and then prints it out
function paintUserNumber(square, number){
	writeNumber(square, number);
	square.setAttribute("value", number);
}

function getConflictingSquare(guess, i, j) {

	var chunk = document.getElementById(getId(i, j)).parentNode.childNodes;
	for(s = 0; s < chunk.length; s++) {
		if(chunk[s].tagName == "canvas" || chunk[s].tagName == "CANVAS") {
			if (chunk[s].getAttribute("value") == guess) {
				return chunk[s];
			}
		}
	}

	for(col = 1; col<10; col++) {
		if (document.getElementById(getId(i, col)).getAttribute("value") == guess) {
			return document.getElementById(getId(i, col));
		}
	}

	for(row = 1; row<10; row++) {
		if (document.getElementById(getId(row, j)).getAttribute("value") == guess) {
			return document.getElementById(getId(row, j));
		}
	}
}

//generate a complete 2d array of a valid board, and paint several starting numbers
function generateBoard() {

	//[row][column][Is computer generated]
	var guranteedGoodBoard=Array(
		Array(1,2,3,9,7,8,5,6,4),
	    Array(4,5,6,3,1,2,8,9,7),
	    Array(7,8,9,6,4,5,2,3,1),
	    Array(3,1,2,8,9,7,4,5,6),
	    Array(6,4,5,2,3,1,7,8,9),
	    Array(9,7,8,5,6,4,1,2,3),
	    Array(2,3,1,7,8,9,6,4,5),
	    Array(5,6,4,1,2,3,9,7,8),
	    Array(8,9,7,4,5,6,3,1,2)
	);

    var answerBoard = shuffle(guranteedGoodBoard,true);
	var newBoard = new Array(9);
	
	for(i = 0; i < 9; i++) {
		newBoard[i]=new Array(9);
		for(j = 0; j < 9; j++) {
			newBoard[i][j]=new Array(3);
			newBoard[i][j][CORRECT_VALUE] = answerBoard[i][j];
			newBoard[i][j][IS_DEFAULT] = true;
		}
	}

	return newBoard;
}

//TODO
//Replace some of the squares' values with blanks, change the third portion of the array [i][j][0] to "false" to indicate it's a user-entered square.
function generateUserBoard(board){
	return board;
}

function getIFromId(id) {
	return id.split("_")[0][3];
}

function getJFromId(id) {
	return id.split("_")[1][3];
}

//paints the square's CORRECT
function paintAnswer(square) {
	name=square.getAttribute('id');
	nameArray=name.split("_");
	value=sudoku[nameArray[0][3]-1][nameArray[1][3]-1][CORRECT_VALUE];

	writeNumber(square, value)
	
	return value;
}

//Returns a boolean value. True if the board is complete.
function isComplete() {

	var isDone = true;
	for (i = 1; i < 10; i++) {
		for (j = 1; j < 10; j++) {
			var c = document.getElementById(getId(i, j));
			if(c.getAttribute("value") === null){
				isDone = false;
			}
		}
	}
	return isDone;
}

function shuffle(array,callAgain){//Shuffles the puzzle. Put in "true" if calling from outside
	holderRow=new Array(9);
	for(i=0;i<3;i++)
		for(j=0;j<50;j++){
			n=Math.floor(Math.random() * 3);
			if(n!=0){
				for(k=0;k<9;k++){
					holderRow[k]=array[i*3+n][k];
					array[i*3+n][k]=array[i*3][k];
					array[i*3][k]=holderRow[k];
				} 
			} else {
				j--;
			}
		}
	if(callAgain==true){
		array=shuffleAgain(array);
	}
	return array;
}

function shuffleAgain(array){//Sub-function of shuffle. Flips rows for columns and shuffles again.
	newArray= new Array(9);
	for(i=0;i<9;i++){
		newArray[i]=new Array(9);
		for(j=0;j<9;j++){
			newArray[i][j]=array[j][i];
		}
	}
	newArray=shuffle(newArray,false);
	return newArray;
}

function reset() {
	selected = null;
	sudokuAnswer = generateBoard(); //This is...the matrix.
	sudoku= generateUserBoard(sudokuAnswer);
	for (i = 1; i < 10; i++) {
		for (j = 1; j < 10; j++) {
			var c = document.getElementById(getId(i, j));
			c.setAttribute("is_default", "false");
			c.removeAttribute("value");
			c.onmouseover = mouseOver;
			c.onmouseout = mouseOut;
			c.onclick = onClickSquare;
			colorBackground(c, EMPTY);
			//sets up the pattern to draw the numbers
			if((i % 3 == j % 5) || (((i * j) % 2) == 1)) {
				colorBackground(c, DEFAULT);
				c.setAttribute("is_default", "true");
				c.setAttribute("value",paintAnswer(c));
			}
		}
	}
}